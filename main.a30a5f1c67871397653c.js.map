{"version":3,"sources":["webpack:///./js/task1.js","webpack:///./js/task2.js","webpack:///./js/task3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","Object","assign","table","makeTransaction","transaction","min","max","Math","floor","random","reject","processData","id","logSuccess","logError","warn","amount"],"mappings":"oIAIMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACTC,EAAOJ,IACNA,MAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,qCCbXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,IAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAdI,OAAAC,OAAA,GAA8BF,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,IAE/D,OAAOhB,QAAQC,QAAQa,IAGnBX,EAAS,SAAAW,GAAY,OAAIT,QAAQc,MAAML,IAE7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCjBnC,IAIMiB,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCzB,GAL2BwB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAsBpD,OAhBgB,IAAItB,QAAQ,SAACC,EAAS0B,GAAV,OAC1BzB,WAAW,WAGT,GAFmBsB,KAAKE,SAAW,GAEnB,CACd,IAAME,EAAc,CAClBC,GAAIR,EAAYQ,GAChBzB,KAAMN,GAERG,EAAQ2B,QAERD,EAAON,EAAYQ,KAEpB/B,MAMDgC,EAAa,SAAAF,GACjBvB,QAAQC,IAAR,eACiBsB,EAAYC,GAD7B,iBACgDD,EAAYxB,KAD5D,QAKI2B,EAAW,SAAAF,GACfxB,QAAQ2B,KAAR,gCAA6CH,EAA7C,8BAGFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GADR,MAESC,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GADR,MAESC,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/B1B,KAAKuB,GADR,MAESC,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/B1B,KAAKuB,GADR,MAESC","file":"main.a30a5f1c67871397653c.js","sourcesContent":["//==========================================================================\r\n//Task 1\r\n//===========================================================================\r\n\r\nconst delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      logger(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","//==========================================================================\r\n//Task 2\r\n//===========================================================================\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n  return Promise.resolve(updatedUsers);\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","// //===========================================================================\r\n// //Task 3\r\n//==============================================================================\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  const promise = new Promise((resolve, reject) =>\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        const processData = {\r\n          id: transaction.id,\r\n          time: delay,\r\n        };\r\n        resolve(processData);\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay),\r\n  );\r\n\r\n  return promise;\r\n};\r\n\r\nconst logSuccess = processData => {\r\n  console.log(\r\n    `Transaction ${processData.id} processed in ${processData.time} ms`,\r\n  );\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n"],"sourceRoot":""}